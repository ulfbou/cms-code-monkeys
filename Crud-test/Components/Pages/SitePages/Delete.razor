@page "/sites/delete"

@using Microsoft.EntityFrameworkCore
@using CodeMonkeys.CMS.Public.Shared.Entities
@inject IDbContextFactory<Crud_test.Data.Crud_testContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Site</h4>
    <hr />
    @if (site is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@site.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedDate</dt>
            <dd class="col-sm-10">@site.CreatedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastModifiedDate</dt>
            <dd class="col-sm-10">@site.LastModifiedDate</dd>
        </dl>
        <EditForm method="post" Model="site" OnValidSubmit="DeleteSite" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(site is null)">Delete</button> |
            <a href="/sites">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Site? site;

    [SupplyParameterFromQuery]
    public int SiteID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        site = await context.Site.FirstOrDefaultAsync(m => m.SiteID == SiteID);

        if (site is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteSite()
    {
        using var context = DbFactory.CreateDbContext();
        context.Site.Remove(site!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/sites");
    }
}
